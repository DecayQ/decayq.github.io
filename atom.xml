<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Log</title>
  
  <subtitle>by DecayQ</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.decay.fun/"/>
  <updated>2019-03-14T08:25:21.062Z</updated>
  <id>https://blog.decay.fun/</id>
  
  <author>
    <name>DecayQ</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>给 Ant Design Vue 中的弹窗内的表单动态赋值的一种方法</title>
    <link href="https://blog.decay.fun/2019/03/14/ant-design-vue-dynamic-form-in-the-modal/"/>
    <id>https://blog.decay.fun/2019/03/14/ant-design-vue-dynamic-form-in-the-modal/</id>
    <published>2019-03-14T07:37:21.000Z</published>
    <updated>2019-03-14T08:25:21.062Z</updated>
    
    <content type="html"><![CDATA[<p>刚刚解决了 Ant Design Vue 中，出现弹窗内的表单动态赋值的问题。</p><p>需求大概是这样，页面中的 Table 放置了 Key 与 Value 对应的列表。每行的右侧有个编辑按钮，点击『编辑』后弹出编辑窗口，并把该行的 Key, Value 赋值到弹窗中相对应的表单项中。</p><p>按照 Ant Design Vue 的文档写好了弹窗的结构：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a-modal</span> <span class="attr">title</span>=<span class="string">"Edit"</span> <span class="attr">:visible</span>=<span class="string">"visible"</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a-form</span> <span class="attr">:form</span>=<span class="string">"form"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a-form-item</span> <span class="attr">label</span>=<span class="string">"Key"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a-input</span> <span class="attr">placeholder</span>=<span class="string">"Key name"</span> <span class="attr">required</span> <span class="attr">v-decorator</span>=<span class="string">"formConfig.key"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a-form-item</span> <span class="attr">label</span>=<span class="string">"Value"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a-input</span> <span class="attr">placeholder</span>=<span class="string">"Value name"</span> <span class="attr">required</span> <span class="attr">v-decorator</span>=<span class="string">"formConfig.value"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a-form-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">a-form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a-modal</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>与处理逻辑：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  watch: &#123;</span><br><span class="line">    visible(isShow) &#123;</span><br><span class="line">      <span class="keyword">if</span> (isShow) &#123;</span><br><span class="line">        <span class="keyword">this</span>.form.setFieldsValue(&#123;</span><br><span class="line">          [<span class="string">"key"</span>]: <span class="keyword">this</span>.key,</span><br><span class="line">          [<span class="string">"value"</span>]: <span class="keyword">this</span>.value</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>但是每次点击按钮后弹出窗口后，相对应的值并没有设置进表单中，而且控制台报了这个错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Warning: You cannot set a form field before rendering a field associated with the value.</span><br></pre></td></tr></table></figure><p>查看 DOM 树后发现，当 visible 第一次为 <code>true</code> 时，&lt;a-modal&gt; 运用单例模式被渲染为 body 的最后一个子元素。所以怀疑是在 form 还没被渲染的时候，就已经调用了 <code>setFieldsValue</code> 的方法。【有别于 React 版的 Ant-Design，其 Modal 提供了 <code>forceRender</code> 参数可供强制渲染。】</p><p>所以把方法调整为：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">watch:&#123;</span><br><span class="line">  visible(isShow) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isShow) &#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">this</span>.isRendered)&#123;</span><br><span class="line">        <span class="keyword">this</span>.setValue(<span class="keyword">this</span>.key, <span class="keyword">this</span>.value);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.isRendered = <span class="literal">true</span>;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">          <span class="keyword">this</span>.setValue(<span class="keyword">this</span>.key, <span class="keyword">this</span>.value);</span><br><span class="line">        &#125;,<span class="number">100</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">methods:&#123;</span><br><span class="line">  setValue(k,v)&#123;</span><br><span class="line">    <span class="keyword">this</span>.form.setFieldsValue(&#123;</span><br><span class="line">      [<span class="string">"key"</span>]: k,</span><br><span class="line">      [<span class="string">"value"</span>]: v</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样一来，通过使用 <code>setTimeout</code> 的方式转化为异步赋值。其中这个100ms的时间差是一开始为了验证“是不是由于渲染时序的原因导致的无法赋值”的问题。验证通过后，发现去掉时间也是可以的。至于 <code>setTimeout(fn, 0)</code> 之所以有效，先放两篇链接。</p><ol><li><a href="https://www.quora.com/What-does-setTimeout-with-a-0ms-delay-do-Is-this-some-trick-to-spawn-a-new-thread-but-why" target="_blank" rel="noopener">What does setTimeout with a 0ms delay do? Is this some trick to spawn a new thread, but why?</a></li><li><a href="https://stackoverflow.com/questions/779379/why-is-settimeoutfn-0-sometimes-useful" target="_blank" rel="noopener">Why is setTimeout(fn, 0) sometimes useful?</a></li></ol><p>以上。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;刚刚解决了 Ant Design Vue 中，出现弹窗内的表单动态赋值的问题。&lt;/p&gt;
&lt;p&gt;需求大概是这样，页面中的 Table 放置了 Key 与 Value 对应的列表。每行的右侧有个编辑按钮，点击『编辑』后弹出编辑窗口，并把该行的 Key, Value 赋值到弹窗中
      
    
    </summary>
    
      <category term="前端" scheme="https://blog.decay.fun/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Vue" scheme="https://blog.decay.fun/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
      <category term="Ant Design" scheme="https://blog.decay.fun/categories/%E5%89%8D%E7%AB%AF/Vue/Ant-Design/"/>
    
    
      <category term="Vue" scheme="https://blog.decay.fun/tags/Vue/"/>
    
      <category term="Ant Design" scheme="https://blog.decay.fun/tags/Ant-Design/"/>
    
  </entry>
  
  <entry>
    <title>《小岛经济学》</title>
    <link href="https://blog.decay.fun/2019/03/07/How-an-economy-grows-and-why-it-crashes/"/>
    <id>https://blog.decay.fun/2019/03/07/How-an-economy-grows-and-why-it-crashes/</id>
    <published>2019-03-07T14:57:32.000Z</published>
    <updated>2019-03-12T07:36:56.409Z</updated>
    
    <content type="html"><![CDATA[<p>上周某个晚班回家的公交上，听到订阅的一位 Youtube 博主推荐了这本《小岛经济学》，因为在他的简述中提到了作者是奥派经济学的粉丝，就顺手<a href="https://u.jd.com/EWgycD" target="_blank" rel="noopener">京东下单</a>买了下来。第二天就送到了，周末花了半天时间就看完了。有痛快的地方，也有不痛快的，就一起记在这里。<br><a id="more"></a></p><blockquote><p>链接中的标题是这本《小岛经济学》的英文名：<em>How an Economy Grows and Why It Crashes</em>。</p></blockquote><p>这本书的作者其实是 <code>Peter D. Schiff</code> 与 <code>Andrew J. Schiff</code> 两人。书的开始，原始人打渔的故事，是来源于他们小时候，信奉奥派经济学的父亲为了让他们更好的理解经济学而创作的比喻。</p><p>奥地利经济学派与凯恩斯经济学派在经济学中是两个对立的学派。前者主张市场的自由开放，回归个人需求；后者推崇政府统一管控，避免经济大起大落。就我自己粗略的理解，前者属于右派，后者属于左派。</p><p>因为觉得自身立场偏向于市场派，我在微博关注过很多市场派的经济学者或爱好者，不仅因为有着相同的信仰（这个词好像有点大了），还因为可以在他们那可以获得不同的观察方式和理解角度。但是现在的我所了解到的，除了市场与政府的博弈在经济上的博弈之外，并没有太多的延伸。所以，当博主介绍到作者是奥派的时候，抱着试图能在书中获知其他人的解读的希望，就毫不犹豫地下了单。</p><p>故事是作者兄弟二人顺着父亲的比喻继续完善的作品。以原始人每天需要打渔开始，一步步地介绍了创业、投资、银行业、服务业、政府、金融风暴等等是如何诞生的。我发现之前觉得深奥的经济学的原理也能如此生动地表达出来，而且纠正或是说思考了之前理解存在的一些偏差，只用了大半天就看完了全书。</p><p>于是记下来一些点：</p><blockquote><ul><li>储蓄不只是提高个人消费能力的手段，还是防止经济受到意外因素影响的重要缓冲器</li><li>储蓄创造资本，而资本使生产扩大成为可能</li><li>起经济增长决定作用的是生产而不是消费</li><li>经济的目的是提高生产力，而非创造就业</li><li>通货膨胀 ≠ 物价上涨</li><li>通货紧缩与通货膨胀可以同时发生</li></ul></blockquote><p>当然，全书也有觉得不大过瘾的地方。虽是在架空的世界进行比喻，开始的发展都是作者独家的设定，有种从零开始建设新世界时高速发展的爽快感。但是越到了后期，与现实的重合度不断提升，读起来就有一种停止了手中建造这座“乌托邦”的进程，开始了与反派进行斗争而停滞不前。心中诸如“既然书中说政府的权利需要公民主动放弃一部分的自由，那么在前者不断扩张的前提下，奥派是否有可以解决的思路或者是方案”等等问题并没有解答，而是照着现实继续虚构。还有一点是，本书的用意是提醒美国政府重视实体行业，所以书中虚构了许多现实中美联邦银行高层这类人物，虽然翻译时用的名称是其现实中的名称谐音，但由于我不熟悉，所以那几章看得也是糊里糊涂的。</p><p>我觉得，一切的问题归根到底都是经济问题。不知道奥派除了对经济之外，对法律、政治等等其他的有没有相对应的理论。我很好奇。</p><p>最后，留一个京东的购买链接：<a href="https://u.jd.com/EWgycD" target="_blank" rel="noopener">https://u.jd.com/EWgycD</a></p><p><img src="http://cdn.decay.fun/xiao-dao-jing-ji-xue.jpg" alt="小岛经济学"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上周某个晚班回家的公交上，听到订阅的一位 Youtube 博主推荐了这本《小岛经济学》，因为在他的简述中提到了作者是奥派经济学的粉丝，就顺手&lt;a href=&quot;https://u.jd.com/EWgycD&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;京东下单&lt;/a&gt;买了下来。第二天就送到了，周末花了半天时间就看完了。有痛快的地方，也有不痛快的，就一起记在这里。&lt;br&gt;
    
    </summary>
    
      <category term="书单" scheme="https://blog.decay.fun/categories/%E4%B9%A6%E5%8D%95/"/>
    
      <category term="读书笔记" scheme="https://blog.decay.fun/categories/%E4%B9%A6%E5%8D%95/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="阅读" scheme="https://blog.decay.fun/tags/%E9%98%85%E8%AF%BB/"/>
    
      <category term="笔记" scheme="https://blog.decay.fun/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="奥派" scheme="https://blog.decay.fun/tags/%E5%A5%A5%E6%B4%BE/"/>
    
  </entry>
  
  <entry>
    <title>Init()</title>
    <link href="https://blog.decay.fun/2019/03/06/Init/"/>
    <id>https://blog.decay.fun/2019/03/06/Init/</id>
    <published>2019-03-06T08:22:38.000Z</published>
    <updated>2019-03-08T01:58:12.444Z</updated>
    
    <content type="html"><![CDATA[<p>其实准确来说应该是昨天下午的差不多这个时间搭建好了这个站点。照理说身为一个前端，自己的网站不是自己做的好像很说不过去。</p><p>哈哈哈哈。</p><a id="more"></a><p>不过倒是现学了 hexo ，照着理解顺便改了配置文件，还从一堆模板里面选了觉得适合文字站点还改了一些样式，倒是不用一俩小时就架了起来，内心在一定程度上安慰了自己。不过现在微博和朋友圈也发得很少，更不用说我的那个公众号了。现在居然还人模人样地弄了一个专门的博客网站，想顺上个时代的大潮好像晚的也太过分了些。</p><p>弄这个网站，起因主要是因为想写一些记录项目过程的文章：公众号太需要花时间在排版上（可见我不合格的前端基本素养）还可能需要考虑风格、面向的读者等等杂七杂八的琐事，想要记录零零碎碎的一些东西可能因为这些的原因，刚开热的“新建文章”页面就关了下来。</p><p>在这边我想记录些开发过程中的思路或者是日常，可能像记流水账样的东西。精力还是需要集中在内容，而不是在哪个载体上，否则又重蹈了上述的覆辙，所以选择工具生成而不是从头开始写。网站开发这块我想还是不要占用太多时间，等之后完工了，再慢慢调优不急。</p><p>前几天看到说，现在用搜索引擎搜到的内容还不如一个大型 app 能搜到自己站点的内容多（可能有偏差），联想到几年前看到的文章（准确地说是三年前，刚凭着记忆去找，还真找到了）<a href="https://zhuanlan.zhihu.com/p/22561084" target="_blank" rel="noopener">《Web 在继续离我们远去》</a>中，引用过<a href="https://blog.yitianshijie.net/2016/04/13/wechat-against-world-wide-web?utm_source=decayq_github_io" target="_blank" rel="noopener">《微信并不是在「管理」外部链接，因为微信公众号在事实上（de facto）不允许任何外部链接》</a>中的描述：</p><blockquote><p>中文世界一直混淆互联网（internet）和万维网（web）。人们念兹在兹的「互联网开放精神」，实乃万维网的开放精神。万维网的开放主要就体现在一点：任何万维网上的文章之间都可以通过网址随意互相链接。如果我想在文章里介绍 UbuWeb 这个网站，我就可以直接在 UbuWeb 这六个字母上添加它的网址 ubu.com。妳或许觉得这是废话，但在微信公众号的文章里妳做不到；妳只能添加微信生态圈内的链接，比如这个：<a href="https://weixin.qq.com/cgi-bin/readtemplate?t=weixin_external_links_content_management_specification" target="_blank" rel="noopener">https://weixin.qq.com/cgi-bin/readtemplate?t=weixin_external_links_content_management_specification</a> （即上述《规范》的链接）</p></blockquote><p>我的第一个网站，或者说只是一个小网页，是我在小学毕业的时候做的。当时用的还是父亲的笔记本，用 FrontPage 拖拽 <code>&lt;table&gt;</code> 而成的第一个页面。当时做的就是一个给我们家里面的成员用的导航页面。上面放了每个成员的常用网站入口，当时对 <code>超链接</code> 的命名还印象深刻。互联网——准确地说是万维网——的魅力我想，从那个时候开始就略有体会。希望从这个小博客出发，好好的作为 Open 和 Decentralized 的一员吧。</p><p>那么以上，就是这个博客的初始化了:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> decayq_github_io = <span class="keyword">new</span> Hexo(&#123;</span><br><span class="line">  title: <span class="string">'Log'</span>,</span><br><span class="line">  subtitle: <span class="string">'by DecayQ'</span>,</span><br><span class="line">  lang: <span class="string">'zh-CN'</span>,</span><br><span class="line">  theme: <span class="string">'maupassant'</span>,</span><br><span class="line">  alias: <span class="string">'blog.decay.fun'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">decayq_github_io.init();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &gt; Welcome to World Wide Web</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其实准确来说应该是昨天下午的差不多这个时间搭建好了这个站点。照理说身为一个前端，自己的网站不是自己做的好像很说不过去。&lt;/p&gt;
&lt;p&gt;哈哈哈哈。&lt;/p&gt;
    
    </summary>
    
      <category term="杂事" scheme="https://blog.decay.fun/categories/%E6%9D%82%E4%BA%8B/"/>
    
    
      <category term="hexo" scheme="https://blog.decay.fun/tags/hexo/"/>
    
      <category term="博客" scheme="https://blog.decay.fun/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="互联网" scheme="https://blog.decay.fun/tags/%E4%BA%92%E8%81%94%E7%BD%91/"/>
    
  </entry>
  
</feed>
